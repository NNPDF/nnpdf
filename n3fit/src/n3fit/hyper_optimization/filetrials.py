"""
    Custom hyperopt trial object for persistent file storage
    in the form of a json file within the nnfit folder
"""
import json
import logging
from hyperopt import Trials, space_eval

log = logging.getLogger(__name__)

# Note: the plan would be to do a PR in hyperopt's main repository
# because these are things generic and useful enough that should be
# in hyperopt by default. But for now it will stay here.


def space_eval_trial(space, trial):
    """
    This function is a wrapper around hyperopt's space eval in order to add
    to the json a dictionary containing the human-readable values.
    i.e., the standard json would say: "optimizer = [5]" and we want it to say optimizer = "Adam"
    But all this function does before calling hyperopt's space_eval is to "unlist" the items.
    If you think space_eval should do that by itself, you are not alone
    https://github.com/hyperopt/hyperopt/issues/383#issuecomment-378561408

    # Arguments:
        - `space`: the dictionary containing the hyperopt space samplers we pass
                   to the hyperparametrizable function
        - `trial`: trial dictionary. This is a dictionary containing (among other things)
                   the list of parameters that were tried for this iteration of hyperopt

    # Returns:
        A dictionary containing the values of all the parameters in a human-readable format
    """
    for_eval = {}
    for key, values in trial["misc"]["vals"].items():
        if values:
            for_eval[key] = values[0]
        else:
            for_eval[key] = None
    return space_eval(space, for_eval)


class FileTrials(Trials):
    """
    Stores trial results on the fly inside the nnfit replica folder

    # ArgumentS:
        - `replica_path`: the replica folder as generated by n3fit
        - `parameters`: dictionary of parameters on which we are doing hyperopt
    """

    def __init__(self, replica_path, parameters=None, **kwargs):
        self._store_trial = False
        self._json_file = "{0}/tries.json".format(replica_path)
        self._parameters = parameters
        super().__init__(**kwargs)

    def refresh(self):
        """
        This is the "flushing" method which is called at the end of every trial to
        save things in the database. We are are overloading it in order to also write
        to a json file with every single trial.
        """
        super().refresh()

        # write json to disk
        if self._store_trial:
            log.info("Storing scan in %s", self._json_file)
            local_trials = []
            for idx, t in enumerate(self._dynamic_trials):
                local_trials.append(t)
                local_trials[idx]["misc"]["space_vals"] = space_eval_trial(
                    self._parameters, t
                )

            all_to_str = json.dumps(local_trials, default=str)
            with open(self._json_file, "w") as f:
                f.write(all_to_str)

    # The two methods below are just a stupid overloading to avoid writing to the
    # database twice
    def new_trial_ids(self, N):
        self._store_trial = False
        return super().new_trial_ids(N)

    def new_trial_docs(self, tids, specs, results, miscs):
        self._store_trial = True
        return super().new_trial_docs(tids, specs, results, miscs)
